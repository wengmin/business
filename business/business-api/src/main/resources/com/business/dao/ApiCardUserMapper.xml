<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.business.dao.ApiCardUserMapper">

    <resultMap type="com.business.entity.CardUserVo" id="BaseResultMap">
        <result property="cardId" column="card_id"/>
        <result property="userId" column="user_id"/>
        <result property="companyName" column="companyName"/>
        <result property="avatar" column="avatar"/>
        <result property="mobile" column="mobile"/>
        <result property="companyId" column="company_id"/>
        <result property="realname" column="realname"/>
        <result property="photo" column="photo"/>
        <result property="position" column="position"/>
        <result property="wechat" column="wechat"/>
        <result property="email" column="email"/>
        <result property="profile" column="profile"/>
        <result property="province" column="province"/>
        <result property="city" column="city"/>
        <result property="county" column="county"/>
        <result property="address" column="address"/>
        <result property="telephone" column="telephone"/>
        <result property="qrCode" column="qr_code"/>
        <result property="createTime" column="create_time"/>
    </resultMap>

    <sql id="Base_Column_List">
	    `card_id`,
	    `user_id`,
	    `company_id`,
	    (select name from customer_company where  customer_company.company_id=card_user.company_id) as companyName,
	    (select avatar from customer_user where  customer_user.user_id=card_user.user_id) as avatar,
	    (select mobile from customer_user where  customer_user.user_id=card_user.user_id) as mobile,
	    `realname`,
	    `photo`,
	    `position`,
	    `wechat`,
	    `email`,
	    `profile`,
	    `province`,
	    `city`,
	    `county`,
	    `address`,
	    `telephone`,
	    `qr_code`,
	    `create_time`
  	</sql>

    <select id="queryByOpenId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from card_user
        where user_id=(select user_id from customer_user where openid=#{openId})
    </select>

    <select id="queryByUserId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from card_user where user_id = #{value}
    </select>

    <select id="queryList" resultType="com.business.entity.CardUserVo">
        select
        <include refid="Base_Column_List"/>
        from card_user
        WHERE 1=1
        <if test="name != null and name.trim() != ''">
            AND name LIKE concat('%',#{name},'%')
        </if>
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
            <otherwise>
                order by card_id desc
            </otherwise>
        </choose>
        <if test="offset != null and limit != null">
            limit #{offset}, #{limit}
        </if>
    </select>

    <select id="queryTotal" resultType="int">
        select count(*) from card_user
        WHERE 1=1
        <if test="name != null and name.trim() != ''">
            AND name LIKE concat('%',#{name},'%')
        </if>
    </select>

    <insert id="save" parameterType="com.business.entity.CardUserVo">
		insert into card_user(
          `user_id`,
          `company_id`,
          `realname`,
          `photo`,
          `position`,
          `wechat`,
          `email`,
          `profile`,
          `province`,
          `city`,
          `county`,
          `address`,
          `telephone`,
          `qr_code`,
          `create_time`)
		values(
          #{userId},
          #{companyId},
          #{realname},
          #{photo},
          #{position},
          #{wechat},
          #{email},
          #{profile},
          #{province},
          #{city},
          #{county},
          #{address},
          #{telephone},
          #{qrCode},
          now())
	</insert>

    <update id="update" parameterType="com.business.entity.CardUserVo">
        update card_user
        <set>
            <if test="userId != null">
                `user_id` = #{userId},
            </if>
            <if test="companyId != null">
                `company_id` = #{companyId},
            </if>
            <if test="realname != null">
                `realname` = #{realname},
            </if>
            <if test="photo != null">
                `photo` = #{photo},
            </if>
            <if test="position != null">
                `position` = #{position},
            </if>
            <if test="wechat != null">
                `wechat` = #{wechat},
            </if>
            <if test="email != null">
                `email` = #{email},
            </if>
            <if test="profile != null">
                `profile` = #{profile},
            </if>
            <if test="province != null">
                `province` = #{province},
            </if>
            <if test="city != null">
                `city` = #{city},
            </if>
            <if test="county != null">
                `county` = #{county},
            </if>
            <if test="address != null">
                `address` = #{address},
            </if>
            <if test="telephone != null">
                `telephone` = #{telephone},
            </if>
            <if test="qrCode != null">
                `qr_code` = #{qrCode},
            </if>
            <if test="createTime != null">
                `create_time` = #{createTime}
            </if>
        </set>
        where card_id = #{cardId}
    </update>

    <delete id="delete">
        delete from card_user where card_id = #{value}
    </delete>

    <delete id="deleteBatch">
        delete from card_user where card_id in
        <foreach item="cardId" collection="array" open="(" separator="," close=")">
            #{cardId}
        </foreach>
    </delete>
</mapper>